// Generated by gencpp from file plumbing_server_client/SerialResponse.msg
// DO NOT EDIT!


#ifndef PLUMBING_SERVER_CLIENT_MESSAGE_SERIALRESPONSE_H
#define PLUMBING_SERVER_CLIENT_MESSAGE_SERIALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plumbing_server_client
{
template <class ContainerAllocator>
struct SerialResponse_
{
  typedef SerialResponse_<ContainerAllocator> Type;

  SerialResponse_()
    : OutputData()  {
    }
  SerialResponse_(const ContainerAllocator& _alloc)
    : OutputData(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _OutputData_type;
  _OutputData_type OutputData;





  typedef boost::shared_ptr< ::plumbing_server_client::SerialResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plumbing_server_client::SerialResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SerialResponse_

typedef ::plumbing_server_client::SerialResponse_<std::allocator<void> > SerialResponse;

typedef boost::shared_ptr< ::plumbing_server_client::SerialResponse > SerialResponsePtr;
typedef boost::shared_ptr< ::plumbing_server_client::SerialResponse const> SerialResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plumbing_server_client::SerialResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plumbing_server_client::SerialResponse_<ContainerAllocator1> & lhs, const ::plumbing_server_client::SerialResponse_<ContainerAllocator2> & rhs)
{
  return lhs.OutputData == rhs.OutputData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plumbing_server_client::SerialResponse_<ContainerAllocator1> & lhs, const ::plumbing_server_client::SerialResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plumbing_server_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_server_client::SerialResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plumbing_server_client::SerialResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_server_client::SerialResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9dc026d88d5c227f79b32bbb5ad0e23";
  }

  static const char* value(const ::plumbing_server_client::SerialResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9dc026d88d5c227ULL;
  static const uint64_t static_value2 = 0xf79b32bbb5ad0e23ULL;
};

template<class ContainerAllocator>
struct DataType< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plumbing_server_client/SerialResponse";
  }

  static const char* value(const ::plumbing_server_client::SerialResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] OutputData\n"
;
  }

  static const char* value(const ::plumbing_server_client::SerialResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.OutputData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SerialResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plumbing_server_client::SerialResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plumbing_server_client::SerialResponse_<ContainerAllocator>& v)
  {
    s << indent << "OutputData[]" << std::endl;
    for (size_t i = 0; i < v.OutputData.size(); ++i)
    {
      s << indent << "  OutputData[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.OutputData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUMBING_SERVER_CLIENT_MESSAGE_SERIALRESPONSE_H
